#WebPack
--------------------------------------------------------------
WebPack可以看做是模块打包机：它做的事情是，分析你的项目结构，
找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语
言（Scss，TypeScript等），并将其转换和打包为合适的格式供浏览器
使用
--------------------------------------------------------------
模块化\使用新特性，转化\Sass less
--------------------------------------------------------------



#webpack 与 grunt/glup 区别
--------------------------------------------------------------
Grunt和Gulp的工作方式是：在一个配置文件中，指明对某些文件进行
类似编译，组合，压缩等任务的具体步骤，工具之后可以自动替你完成
这些任务。

Webpack的工作方式是：把你的项目当做一个整体，通过一个给定的主
文件（如：index.js），Webpack将从这个文件开始找到你的项目的所
有依赖文件，使用loaders处理它们，最后打包为一个（或多个）浏览
器可识别的JavaScript文件。
--------------------------------------------------------------

#webpack如何使用
--------------------------------------------------------------
npm install -g webpack  //全局安装

npm install --save-dev webpack //安装到你的项目目录
--------------------------------------------------------------
webpack  //直接wepack,找webpack.config.js脚本，项目中运行

npm start //找package.json中script脚本并执行
--------------------------------------------------------------



#devtool
---------------------------------------------------------------
生成Source Maps（使调试更容易）
devtool: 'eval-source-map',



#devServer
---------------------------------------------------------------
使用webpack构建本地服务器
npm install --save-dev webpack-dev-server

devServer: {
    contentBase: "./public",//本地服务器所加载的页面所在的目录
    historyApiFallback: true,//不跳转
    inline: true//实时刷新
} 



#Loaders
---------------------------------------------------------------
Loaders是webpack提供的最激动人心的功能之一了。通过使用不同的
loader，webpack有能力调用外部的脚本或工具，实现对不同格式的文件
的处理，比如说分析转换scss为css，或者把下一代的JS文件（ES6，ES7)转换为现代浏览器兼容的JS文件，对React的开发而言，合适的Loaders
可以把React的中用到的JSX文件转换为JS文件。

在webpack.config.js中的modules关键字下进行配置

[1]test：一个用以匹配loaders所处理文件的拓展名的正则表达式（必须）
[2]loader：loader的名称（必须）
[3]include/exclude:手动添加必须处理的文件（文件夹）或屏蔽不需要处理的文件（文件夹）（可选）
[4]query：为loaders提供额外的设置选项（可选）


#loaders 配置 Babel
---------------------------------------------------------------------------------
// 用得最多的是解析Es6的babel-preset-es2015包
// 解析JSX的babel-preset-react包
// npm一次性安装多个依赖模块，模块之间用空格隔开
npm install --save-dev babel-core babel-loader babel-preset-es2015 babel-preset-react
module: {
        rules: [
            {
                test: /(\.jsx|\.js)$/,
                use: {
                    loader: "babel-loader",
                    options: {
                        presets: [
                            "es2015", "react"
                        ]
                    }
                },
                exclude: /node_modules/
            }
        ]
    }



#.babelrc
---------------------------------------------------------------------------------
Babel其实可以完全在 webpack.config.js 中进行配置
考虑到babel具有非常多的配置选项，在单一的webpack.config.js文件中进行配置往往使得这个文件显得太复杂

把上面的options,放到.balelrc中，如下
//.babelrc
{
  "presets": ["react", "es2015"]
}
---------------------------------------------------------------------------------



#css
---------------------------------------------------------------------------------
npm install --save-dev style-loader css-loader  //安装

webpack.config.js 的module中添加
。。。
{
    test: /\.css$/,
    use: [
        {
            loader: "style-loader"
        }, {
            loader: "css-loader",
            options: {
                modules: true
            }
        }
    ]
}
。。。


# CSS modules // https://github.com/css-modules/css-modules
----------------------------------------------------------------------------------------
CSS模块，所有的类名，动画名默认都只作用于当前模块
，在CSS loader中进行配置后，你所需要做的一切就是把”modules“传递到所需要的地方，然后就可以直接把CSS的类名传递到组件的代码中


webpack.config.js
。。。
{
    loader: "css-loader",
    options: {
        modules: true
    }
}
。。。


#CSS预处理器 http://www.ruanyifeng.com/blog/2016/06/css_modules.html
----------------------------------------------------------------------------------------
Sass 和 Less 之类的预处理器是对原生CSS的拓展
CSS预处理器可以把特殊类型语句转化为浏览器可识别的CSS语句，



#PostCSS
----------------------------------------------------------------------------------------
CSS的处理平台-PostCSS，它可以帮助你的CSS实现更多的功能

npm install --save-dev postcss-loader autoprefixer //安装

webpack.config.js

。。。
{
    loader: "postcss-loader"
}
。。。

// postcss.config.js
module.exports = {
    plugins: [
        require('autoprefixer')
    ]
}



#插件（Plugins）
----------------------------------------------------------------------------------------
未完待续。。。



